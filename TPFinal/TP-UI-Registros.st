BorderedMorph subclass: #RegistrarEmpresa	instanceVariableNames: 'Nombre Cuit Tipo Rubro Producto esSolicitante Agregar Controller btnSalir'	classVariableNames: ''	package: 'TP-UI-Registros'!!RegistrarEmpresa methodsFor: 'adding' stamp: 'francozuniga 2/23/2024 17:45'!addEmpresa: controller	|control login|.	login := Login new.	control := controller verificarEmpresaConNombre: (Nombre getText) CUIT: (Cuit getText) Rubro: (Rubro getText) Tipo: (Tipo selectedItem ) Producto: (Producto getText) EsSolicitante: (esSolicitante selectedItem ).	control ifTrue: [ 		controller registrarEmpresaConNombre: (Nombre getText ) CUIT: (Cuit getText) Tipo: (Tipo selectedItem ) Rubro: (Rubro getText ) Producto: (Producto getText ) EsSolicitante: (esSolicitante selectedItem ).		login openInWorld .		self delete.	].		! !!RegistrarEmpresa methodsFor: 'initialization' stamp: 'francozuniga 2/28/2024 17:26'!initialize	|labelNombre labelCuit labelTipo labelRubro labelProducto labelEsSolicitante|.	super initialize . 		self extent: 400@500.	self color: Color gray.		labelNombre := LabelMorph new.	labelNombre contents: 'Nombre:'.	labelNombre top: self top +10.	labelNombre left: self left + 10.	self addMorph: labelNombre.		Nombre := SpRubScrolledTextMorph new.	Nombre width: 380.	Nombre top: labelNombre bottom + 10.	Nombre left: self left + 10.		self addMorph: Nombre.		labelCuit := LabelMorph new.	labelCuit contents: 'CUIT:'.	labelCuit top: Nombre bottom + 10.	labelCuit left: self left + 10.		self addMorph: labelCuit .		Cuit := SpRubScrolledTextMorph new.	Cuit width: 380.	Cuit top: labelCuit bottom + 10.	Cuit left: self left + 10.		self addMorph: Cuit.		labelTipo := LabelMorph new.	labelTipo contents: 'Tipo Empresa'.	labelTipo top: Cuit bottom + 10.	labelTipo left: self left + 10.		self addMorph: labelTipo.		Tipo := DropListMorph new.	Tipo width: 380.	Tipo list: #('EAP' 'EAC' 'EC').	Tipo top: labelTipo bottom + 10.	Tipo left: self left + 10.		self addMorph: Tipo.		labelRubro := LabelMorph new.	labelRubro contents: 'Rubro:'.	labelRubro top: Tipo bottom + 10.	labelRubro left: self left + 10.	self addMorph: labelRubro .		Rubro := RubScrolledTextMorph new.	Rubro width: 380.	Rubro top: labelRubro bottom + 10.	Rubro left: self left + 10.	self addMorph: Rubro.		labelProducto := LabelMorph new.	labelProducto contents: 'Producto (En caso de que la empresa sea EC se registrara el producto)'.	labelProducto top: Rubro bottom + 10.	labelProducto left: self left + 10.	self addMorph: labelProducto .		Producto := RubScrolledTextMorph new.	Producto width: 380.	Producto top: labelProducto bottom + 10.	Producto left: self left + 10.	self addMorph: Producto.		labelEsSolicitante := LabelMorph new.	labelEsSolicitante contents: 'Â¿Es una Empresa Solicitante?'.	labelEsSolicitante top: Producto bottom + 10.	labelEsSolicitante left: self left + 10.	self addMorph: labelEsSolicitante .		esSolicitante := DropListMorph  new.	esSolicitante width: 380.	esSolicitante list: #('Si' 'No').	esSolicitante top: labelEsSolicitante bottom + 10.	esSolicitante left: self left + 10.	self addMorph: esSolicitante .		btnSalir := ButtonAction new.	btnSalir label: 'Cancelar'.	btnSalir top: esSolicitante bottom + 10.	btnSalir left: self left + 10.	btnSalir mouseAction: [ 		Login new openInWorld .		self delete.	].	self addMorph: btnSalir .		Agregar := ButtonAction new.	Agregar label: 'Agregar Empresa'.	Agregar top: esSolicitante bottom + 10.	Agregar left: btnSalir right + 10.		self addMorph: Agregar.		Controller := RegistrarEmpresaController new.	Agregar mouseAction: [ 		self addEmpresa: Controller.	 ].! !Object subclass: #RegistrarEmpresaController	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-UI-Registros'!!RegistrarEmpresaController methodsFor: 'as yet unclassified' stamp: 'francozuniga 2/22/2024 21:57'!verificarEmpresaConNombre: unNombre CUIT: unCUIT Rubro: unRubro Tipo: unTipo Producto: unProducto EsSolicitante: esSolicitante	|retorno mensaje dialogo|.	retorno := true.	mensaje := ''.		 (unNombre isNotEmpty ) ifFalse:  [ 		mensaje := mensaje , 'Ingrese un Nombre.'.		retorno := false.	 ].	(unCUIT isNotEmpty ) ifFalse: [ 		mensaje := mensaje , 'Ingrese un CUIT.'.		retorno := false.	 ].	(unRubro isNotEmpty ) ifFalse: [ 		mensaje := mensaje , 'Ingrese un Rubro.'.		retorno := false.	 ].	 unTipo isNotNil ifNil: [ 		mensaje := mensaje , 'Seleccione un Tipo.'.		retorno := false.	 ].	(retorno & (unTipo = 'EC')) ifTrue:  [		(unProducto isNotEmpty ) ifFalse: [ 			mensaje := mensaje , 'Ingrese un Producto (el tipo de empresa es EC).'.			retorno := false.			].	].	esSolicitante ifNil: [ 		mensaje := mensaje , 'Tiene que indicar si la empresa es solicitante.'.		retorno := false.	].	retorno ifFalse: [ 		dialogo := InfoDialog new.		dialogo setMessage: mensaje.		dialogo openInWorld .	].	^ retorno.! !!RegistrarEmpresaController methodsFor: 'as yet unclassified' stamp: 'Anonymous 5/13/2024 19:21'!registrarEmpresaConNombre: unNombre CUIT: unCUIT Tipo: unTipo Rubro: unRubro Producto: unProducto EsSolicitante: esSolicitante	|empresa postulante dialog empresaSolicitante|.		postulante := TrabajoAr getPostulantes detect: [ :x | x esPostulanteNombre: unNombre Pass: unCUIT  ] ifNone: [ nil ].		postulante ifNil: [ 		unTipo = 'EC' ifTrue:  [		empresa := EmpresaConvinada new.		empresa setNombre: unNombre CUIT: unCUIT Tipo: unTipo Rubro: unRubro Producto: unProducto Solicitante: esSolicitante		] ifFalse: [ 			empresa := Empresa new.			empresa setNombre: unNombre CUIT: unCUIT Tipo: unTipo Rubro: unRubro Solicitante: esSolicitante . 		]. 		esSolicitante = 'Si' ifTrue:[			empresaSolicitante := EmpresaSolicitante new.			empresa setEmpresaSolicitante: empresaSolicitante .			empresaSolicitante setEmpresa: empresa.			TrabajoAr setEmpresaSolicitante: empresaSolicitante .		].	TrabajoAr setPostulante: empresa.			] ifNotNil: [ 		dialog := InfoDialog new.		dialog setMessage: 'La empresa ya se encuentra registrada'.		dialog openInWorld .	].	! !BorderedMorph subclass: #RegistroMorph	instanceVariableNames: 'Nombre Dni Aptitudes Agregar'	classVariableNames: ''	package: 'TP-UI-Registros'!!RegistroMorph methodsFor: 'initialization' stamp: 'francozuniga 2/28/2024 17:36'!initialize	|labelNombre labelDni labelAptitudes control btnSalir|.	super initialize.	self extent: 400@500.	self color: Color gray.		control := RegistroMorphController new.		labelNombre := LabelMorph new.	labelNombre contents: 'Nombre:'.	labelNombre top: self top + 10.	labelNombre left: self left + 10.	self addMorph: labelNombre.		Nombre := RubScrolledTextMorph new.	Nombre top: labelNombre bottom + 10.	Nombre left: self left + 10.	Nombre width: 380.	self addMorph: Nombre.		labelDni := LabelMorph new.	labelDni contents: 'DNI:'.	labelDni top: Nombre bottom + 10.	labelDni left: self left + 10.	self addMorph: labelDni.		Dni := RubScrolledTextMorph new.	Dni top: labelDni bottom + 10.	Dni left: self left + 10.	Dni width: 380.	self addMorph: Dni.		labelAptitudes := LabelMorph new.	labelAptitudes contents: 'Aptitudes (ingrese cada aptitud separandolas por comas , .'.	labelAptitudes top: Dni bottom + 10.	labelAptitudes left: self left + 10.	self addMorph: labelAptitudes .			Aptitudes := RubScrolledTextMorph new.	Aptitudes top: labelAptitudes bottom + 10.	Aptitudes left: self left + 10.	Aptitudes width: 380.	self addMorph: Aptitudes .		btnSalir := ButtonAction new.	btnSalir label: 'Cancelar'.	btnSalir top: Aptitudes bottom + 10.	btnSalir left: self left + 10.	btnSalir mouseAction: [ 		Login new openInWorld .		self delete.		].		self addMorph: btnSalir .		Agregar := ButtonAction new.	Agregar top: Aptitudes bottom + 10.	Agregar left: btnSalir right + 10.	Agregar label: 'Registrar Persona'.	Agregar mouseAction: [ 		self registrarPersona: control.	].	self addMorph: Agregar.	 ! !!RegistroMorph methodsFor: 'as yet unclassified' stamp: 'francozuniga 2/25/2024 00:14'!registrarPersona: unControlador	|control login|.	control := unControlador registrarPersonaConNombre: (Nombre getText ) DNI: (Dni getText ) Aptitudes: (Aptitudes getText ).	control ifTrue:  [		login := Login new.		login openInWorld .		self delete.	].! !Object subclass: #RegistroMorphController	instanceVariableNames: ''	classVariableNames: ''	package: 'TP-UI-Registros'!!RegistroMorphController methodsFor: 'as yet unclassified' stamp: 'francozuniga 2/25/2024 00:10'!registrarPersonaConNombre: unNombre DNI: unDNI Aptitudes: unasAptitudes	|postulante persona mensaje control|.	postulante := TrabajoAr getPostulantes detect:  [:x | x esPostulanteNombre: unNombre  Pass: unDNI  ] ifNone: [ nil ].	postulante ifNil:  [		control := self verificarPersonaConNombre: unNombre DNI: unDNI  Aptitudes: unasAptitudes .		control ifTrue: [ 			persona := Persona nuevaConNombre: unNombre Dni: unDNI Aptitudes: unasAptitudes .			TrabajoAr  setPostulante: persona .		]. 			^ control.	]ifNotNil: [ 		mensaje := InfoDialog new.		mensaje setMessage: 'La persona ya se encuentra registrada'.		mensaje openInWorld .		^ false.	]! !!RegistroMorphController methodsFor: 'as yet unclassified' stamp: 'francozuniga 2/24/2024 23:51'!verificarPersonaConNombre: unNombre DNI: unDNI Aptitudes: unasAptitudes	|retorno mensaje dialogo|.	retorno := true.	mensaje := ''.		 (unNombre isNotEmpty ) ifFalse:  [ 		mensaje := mensaje , 'Ingrese un Nombre.'.		retorno := false.	 ].	(unDNI isNotEmpty ) ifFalse: [ 		mensaje := mensaje , 'Ingrese un DNI.'.		retorno := false.	 ].	(unasAptitudes isNotEmpty ) ifFalse: [ 		mensaje := mensaje , 'Ingrese un Rubro.'.		retorno := false.	 ].	retorno ifFalse: [ 		dialogo := InfoDialog new.		dialogo setMessage: mensaje.		dialogo openInWorld .	].	^ retorno.! !